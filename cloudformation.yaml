---
AWSTemplateFormatVersion: "2010-09-09"

Description: "obduk-cms app"

Outputs:
  AssetHost:
    Description: "Value for ASSET_HOST"
    Value: !Sub "https://${CloudFront.DomainName}"
  AwsAccessKeyId:
    Description: "Value for AWS_ACCESS_KEY_ID"
    Value: !Ref IAMUserAccessKey
  AwsRegion:
    Description: "Value for AWS_REGION"
    Value: !Ref "AWS::Region"
  AwsS3Bucket:
    Description: "Value for AWS_S3_BUCKET"
    Value: !Ref S3Bucket
  AwsSecretAccessKey:
    Description: "Value for AWS_SECRET_ACCESS_KEY"
    Value: !GetAtt IAMUserAccessKey.SecretAccessKey

Parameters:
  SysadminEmail:
    AllowedPattern: "[a-zA-Z0-9+.]+@([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}"
    Description: "Email address for system notifications"
    Type: "String"

Resources:
  CloudFront:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        CacheBehaviors:
          - Compress: true
            ForwardedValues:
              QueryString: false
            PathPattern: /assets/*
            TargetOriginId: App
            ViewerProtocolPolicy: redirect-to-https
        Comment: !Ref "AWS::StackName"
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: S3
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt S3LogsBucket.DomainName
          Prefix: !Sub "AWSLogs/${AWS::AccountId}/cloudfront/${AWS::StackName}/"
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: S3
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
                - TLSv1.1
                - TLSv1
            DomainName: !Sub "${AWS::StackName}.herokuapp.com"
            Id: App

  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref "AWS::StackName"

  GlueDatabase:
    Type: "AWS::Glue::Database"
    Properties:
      DatabaseInput:
        Name: !Ref "AWS::StackName"
      CatalogId: !Ref "AWS::AccountId"

  GlueCrawler:
    Type: "AWS::Glue::Crawler"
    Properties:
      Role: !GetAtt GlueRole.Arn
      Schedule:
        ScheduleExpression: "cron(0 0 * * ? *)"
      DatabaseName: !Ref GlueDatabase
      Targets:
        S3Targets:
          - Path: !Sub "s3://${S3LogsBucket}/papertrail"
      Name: !Ref "AWS::StackName"

  GlueRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      Policies:
        - PolicyName: access-s3-bucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:ListBucket"
                Resource: !GetAtt S3LogsBucket.Arn
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "${S3LogsBucket.Arn}/*"
      RoleName: !Sub "${AWS::StackName}-glue"

  IAMUser:
    Type: "AWS::IAM::User"
    Properties:
      UserName: !Ref "AWS::StackName"
      Policies:
        - PolicyName: access-s3-bucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:ListBucket"
                Resource: !GetAtt S3Bucket.Arn
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectAcl"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:DeleteObject"
                Resource: !Sub "${S3Bucket.Arn}/*"
        - PolicyName: send-ses-email
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "ses:SendRawEmail"
                Resource: "*"
        - PolicyName: subscribe-sns
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Subscribe"
                  - "sns:ConfirmSubscription"
                Resource: !Ref SNSTopic

  IAMUserAccessKey:
    Type: "AWS::IAM::AccessKey"
    Properties:
      UserName: !Ref IAMUser

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref "AWS::StackName"
      LifecycleConfiguration:
        Rules:
          - Id: delete-incomplete-multipart-uploads
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            Status: Enabled
          - Id: delete-old-versions
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref S3LogsBucket
        LogFilePrefix: !Sub "AWSLogs/${AWS::AccountId}/s3/${AWS::StackName}/"
      VersioningConfiguration:
        Status: Enabled

  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
            Action: "s3:GetObject"
            Resource: !Sub "${S3Bucket.Arn}/*"

  S3LogsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub "${AWS::StackName}-logs"
      LifecycleConfiguration:
        Rules:
          - Id: delete-incomplete-multipart-uploads
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            Status: Enabled
          - Id: delete-old-files
            ExpirationInDays: 90
            Status: Enabled
          - Id: delete-old-versions
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled

  S3LogsBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3LogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "arn:aws:iam::719734659904:root"
            Action: "s3:PutObject"
            Resource: !Sub "${S3LogsBucket.Arn}/papertrail/*"

  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !Sub "https://${AWS::StackName}.herokuapp.com/api/sns_notifications"
          Protocol: https
      TopicName: !Ref "AWS::StackName"

  SNSTopicFailedAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmActions:
        - !Ref SNSTopicSysadmins
      AlarmName: !Sub "${AWS::StackName} > SNS > NumberOfNotificationsFailed"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TopicName
          Value: !GetAtt SNSTopic.TopicName
      EvaluationPeriods: 1
      MetricName: NumberOfNotificationsFailed
      Namespace: AWS/SNS
      OKActions:
        - !Ref SNSTopicSysadmins
      Period: 60
      Statistic: Average
      Threshold: 0
      TreatMissingData: notBreaching

  SNSTopicSysadmins:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !Ref SysadminEmail
          Protocol: email
      TopicName: !Sub "${AWS::StackName}-sysadmins"
