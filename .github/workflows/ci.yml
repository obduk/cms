name: CI

on:
  push:
    branches: [master]
  pull_request:

env:
  NODE_VERSION: 12.18.3
  TF_VERSION: 0.12.29

jobs:
  terraform_plan:
    strategy:
      max-parallel: 1

      matrix:
        tf_workspace: [staging, production, global]
        include:
          - tf_workspace: staging
            tf_dir: terraform/app_environment
          - tf_workspace: production
            tf_dir: terraform/app_environment
          - tf_workspace: global
            tf_dir: terraform/app_global

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{matrix.tf_dir}}

    env:
      TF_WORKSPACE: ${{ matrix.tf_workspace }}

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - run: terraform fmt -check -recursive

      - run: terraform init -lock=false

      - run: terraform plan -no-color -lock=false

      - run: ../../bin/git_changes

  test_ruby:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.11-alpine
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - uses: nanasess/setup-chromedriver@master

      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache yarn
        uses: actions/cache@v1
        with:
          path: node_modules
          key: yarn-${{ hashFiles('.nvmrc') }}-${{ hashFiles('yarn.lock') }}
          restore-keys: yarn-${{ hashFiles('.nvmrc') }}-

      - run: ./bin/setup

      - run: RAILS_ENV=test ./bin/rails webpacker:compile

      - run: ./bin/test

      - run: ./bin/quality

      - run: ./bin/git_changes

  automerge:
    if: github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'

    needs: [terraform_plan, test_ruby]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/github-script@0.2.0
        with:
          script: |
            github.pullRequests.merge({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              pull_number: context.payload.pull_request.number
            })
          github-token: ${{github.token}}

  deploy:
    if: github.ref == 'refs/heads/master'

    needs: [terraform_plan, test_ruby]

    strategy:
      max-parallel: 1

      matrix:
        tf_workspace: [staging, production, global]
        include:
          - tf_workspace: staging
            tf_dir: terraform/app_environment
          - tf_workspace: production
            tf_dir: terraform/app_environment
          - tf_workspace: global
            tf_dir: terraform/app_global

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{matrix.tf_dir}}

    env:
      TF_WORKSPACE: ${{ matrix.tf_workspace }}

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - run: terraform init

      - run: terraform apply -lock-timeout=30s

      - run: ../../bin/git_changes
